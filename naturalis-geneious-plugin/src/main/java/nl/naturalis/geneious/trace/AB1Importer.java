package nl.naturalis.geneious.trace;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.biomatters.geneious.publicapi.documents.AnnotatedPluginDocument;
import com.biomatters.geneious.publicapi.plugin.DocumentImportException;
import com.biomatters.geneious.publicapi.plugin.PluginUtilities;

import nl.naturalis.geneious.gui.log.GuiLogManager;
import nl.naturalis.geneious.gui.log.GuiLogger;

import static nl.naturalis.geneious.gui.log.GuiLogger.format;

/**
 * Imports the AB1 files selected by the user into Geneious.
 */
class AB1Importer {

  private static final GuiLogger guiLogger = GuiLogManager.getLogger(AB1Importer.class);

  private final List<Ab1SequenceInfo> sequences;
  private final ImportStats stats;

  AB1Importer(List<Ab1SequenceInfo> sequences) {
    guiLogger.info("Starting AB1 file importer");
    this.sequences = sequences;
    this.stats = new ImportStats();
  }

  /**
   * Imports the AB1 files.
   * 
   * @return
   * @throws IOException
   */
  List<AnnotatedPluginDocument> importFiles() throws IOException {
    List<AnnotatedPluginDocument> result = new ArrayList<>(sequences.size());
    for (Ab1SequenceInfo seq : sequences) {
      ++stats.processed;
      File f = seq.getSourceFile();
      guiLogger.debugf(() -> format("Importing file: %s", f.getName()));
      try {
        List<AnnotatedPluginDocument> apds = PluginUtilities.importDocuments(f, null);
        if (apds.size() != 1) { // We don't understand when this might happen, so let's just crash
          throw new AssertionError(("Unexpected number of documents created from a single file: %s. Aborting: " + apds.size()));
        }
        result.add(apds.get(0));
        ++stats.imported;
      } catch (DocumentImportException e) {
        guiLogger.error("Error processing file %s", e, f.getAbsolutePath());
        ++stats.rejected;
      }
    }
    return result;
  }

  /**
   * Returns the statics generated by the importer.
   * @return
   */
  ImportStats getImportStatistics() {
    return stats;
  }

}
