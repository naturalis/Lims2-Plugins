<?xml version="1.0" encoding="UTF-8"?>
<project name="nl.naturalis.lims2.bold.importer" default="distribute" basedir=".">

    <property file="plugin.properties"/>
    <property name="build" location="build"/>
    <property name="classes" location="classes"/>
    <property name="src/main/java" location="src/main/java"/>
	<property name="utilities.dir" value="../nl.naturalis.lims2.utils/src/main/java"/>

    <path id="classpath">
        <fileset dir="../../GeneiousFiles/lib">
            <include name="GeneiousPublicAPI.jar"/>
            <include name="jdom.jar"/>
            <include name="jebl.jar"/>
        	<include name="commons-lang3-3.4.jar"/>
        	<include name="opencsv-3.5.jar"/>
        	<include name="slf4j-api-1.7.12.jar"/>
        </fileset>
    	<fileset dir="${utilities.dir}">
    	    <include name=".java"/>
    	</fileset>
    </path>
	
    <target name= "distribute" depends="build">
        <zip zipfile="${build}/${short-plugin-name}.gplugin">
            <fileset dir="${build}" includes="${plugin-name}/**" />
        </zip>
        <echo message="Created ${build}/${short-plugin-name}.gplugin"/>
    </target>

    <target name="build" depends="clean, compile">
        <!--This is an example of a folder type plugin.  It provides its jar file and resources inside a folder rather
        than just consisting of a single jar file. -->

        <mkdir dir="${build}/${plugin-name}"/>
        <jar jarfile="${build}/${plugin-name}/${short-plugin-name}.jar">
            <fileset dir="${classes}"/>
        </jar>
    </target>
	
    <target name="compile" depends="prepare">
        <javac target="1.6" source="1.6" destdir="${classes}" includeantruntime="true" debug="false">
            <classpath refid="classpath"/>
            <src path="${src/main/java}"/>
        	<src path="${utilities.dir}"/>
        </javac>
    	<copy  todir="nl.naturalis.lims2.utils">
    	      <fileset dir="src/main/java"/>
    	</copy>
    </target>

    <target name="prepare">
        <mkdir dir="${build}"/>
        <mkdir dir="${classes}"/>
    </target>

    <target name="clean">
        <delete dir="${build}"/>
        <delete dir="${classes}"/>
    </target>

    <target name="copyPluginAndRename">
        <!-- This task renames this plugin, including source code files and build scripts.
        To use it, enter the appropriate values for the first 3 properties and then run it.
        The 3rd property value must be identical to the second except with "." replaced with "/" -->
        <property name="newPluginName" value="LimsImportUpdater"/>
        <property name="newPluginPackageName" value="nl.naturalis.lims2.bold.importer.nl.naturalis.lims2.bold.importer"/>
        <property name="newPluginPackagePath" value="nl/naturalis/lims2.bold.importer/nl.naturalis.lims2.bold.importer"/>

        <property name="oldPluginName" value="LimsImportUpdater"/>
        <property name="oldPluginPackageName" value="nl.naturalis.lims2.bold.importer.nl.naturalis.lims2.bold.importer"/>
        <property name="oldPluginPackagePath" value="nl/naturalis/lims2.bold.importer/nl.naturalis.lims2.bold.importer"/>
        <!--It doesn't appear we can automatically replace "." with "/" in a property in basic ant without relying on the ant-contrib package being installed-->

        <property name="destDir" value="../${newPluginName}"/>

        <fail message="You must set the newPluginName property in the ant task XML before running this">
            <condition><equals arg1="${oldPluginName}" arg2="${newPluginName}"/></condition>
        </fail>
        <fail message="You must set the newPluginPackageName property in the ant task XML before running this">
            <condition><equals arg1="${oldPluginPackageName}" arg2="${newPluginPackageName}"/></condition>
        </fail>
        <fail message="You must set the newPluginPackagePath property in the ant task XML before running this">
            <condition><equals arg1="${oldPluginPackagePath}" arg2="${newPluginPackagePath}"/></condition>
        </fail>

        <copy todir="${destDir}">
            <fileset dir="."/>
        </copy>

        <replace dir="${destDir}" token="${oldPluginPackageName}" value="${newPluginPackageName}"/>
        <replace dir="${destDir}" token="${oldPluginPackagePath}" value="${newPluginPackagePath}"/>
        <replace dir="${destDir}" token="${oldPluginName}" value="${newPluginName}"/>

        <move todir="${destDir}/src/${newPluginPackagePath}">
            <fileset dir="${destDir}/src/${oldPluginPackagePath}"/>
        </move>

        <move todir="${destDir}/src/${newPluginPackagePath}">
            <fileset dir="${destDir}/src/${newPluginPackagePath}"/>
            <mapper type="glob" from="${oldPluginName}*.java" to="${newPluginName}*.java"/>
        </move>

        <move todir="${destDir}">
            <fileset dir="${destDir}"/>
            <mapper type="glob" from="${oldPluginName}.*" to="${newPluginName}.*"/>
        </move>

        <!-- edit intellij project files -->

        <copy todir="../.ideaBackup" overwrite="true">
            <fileset dir="../.idea"/>
        </copy>

        <copy file="../.idea/modules.xml" tofile="../.idea/modules.xml.new" overwrite="true">
            <filterchain>
                <tokenfilter>
                    <replaceregex byline="true" flags="s"
                                  pattern="(.*)${oldPluginName}/${oldPluginName}(.*)${oldPluginName}/${oldPluginName}(.*)$"
                                  replace="\0&#10;\1${newPluginName}/${newPluginName}\2${newPluginName}/${newPluginName}\3"/>
                </tokenfilter>
            </filterchain>
        </copy>
        <fixcrlf file="../.idea/modules.xml.new"/>
        <move file="../.idea/modules.xml.new" tofile="../.idea/modules.xml" overwrite="true"/>

        <copy file="../.idea/runConfigurations/${oldPluginName}.xml" tofile="../.idea/runConfigurations/${newPluginName}.xml" overwrite="true"/>
        <replace file="../.idea/runConfigurations/${newPluginName}.xml" token="${oldPluginPackageName}" value="${newPluginPackageName}"/>
        <replace file="../.idea/runConfigurations/${newPluginName}.xml" token="${oldPluginName}" value="${newPluginName}"/>

    </target>
	
	<target name='email' >
	    <mail mailhost='smtp.gmail.com' mailport='465' user='Reinier.Kartowikromo@naturalis.nl'  
	       password='Karem0635'  messageMimeType='text/html'
	       tolist='Reinier.Kartowikromo@naturalis.nl' from='Reinier.Kartowikromo@naturalis.nl'  subject='Build completed.'
	     >
	      <message>
	        <![CDATA[ Geneious build Lims 2 updater. <P><a href='http://www.naturalis.nl'>link</a> ]]>
	      </message>
	    </mail>
	  </target>
	  

</project>
